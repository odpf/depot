buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.17'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.7"
        classpath "org.ajoberstar:gradle-git:1.6.0"
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'checkstyle'
    id 'jacoco'
    id "com.google.protobuf" version "0.8.17"
    id 'nebula.ospackage' version '8.6.3'
    id 'io.franzbecker.gradle-lombok' version '1.14'
    id 'maven-publish'
}

group 'io.odpf'
version '0.1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.1.0'
    implementation group: 'com.datadoghq', name: 'java-dogstatsd-client', version: '2.13.0'
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.1.0'
    implementation group: 'io.odpf', name: 'stencil', version: '0.1.6' exclude group: 'org.slf4j'
    implementation group: 'org.aeonbits.owner', name: 'owner', version: '1.0.9'
    implementation 'com.google.cloud:google-cloud-bigquery:1.115.0'
    implementation "io.grpc:grpc-all:1.18.0"
    implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.35'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2.1'
    implementation 'org.json:json:20220320'

    testImplementation group: 'junit', name: 'junit', version: '4.13'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation "com.github.tomakehurst:wiremock:2.3.1"
    testImplementation group: 'io.opentracing', name: 'opentracing-mock', version: '0.33.0'
    testImplementation group: 'org.mock-server', name: 'mockserver-netty', version: '3.10.5'
    testImplementation gradleTestKit()
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}


test {
    beforeTest {
        descriptor -> logger.lifecycle("Running test: " + descriptor)
    }
    testLogging {
        exceptionFormat "full" // default is "short"
        events "passed", "skipped", "failed"
    }
    useJUnit {
    }
    doLast {
        delete "$projectDir/src/test/resources/__files"
    }

}
checkstyle {
    toolVersion '7.6.1'
    configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}

clean {
    delete "$projectDir/src/test/resources/__files"
}

idea {
    module {
        testSourceDirs += file("$projectDir/src/generated/test/java")
    }
}

protobuf {
    generatedFilesBaseDir = "$projectDir/src/generated"
    protoc {
        artifact = "com.google.protobuf:protoc:3.1.0"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.0.3"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        all().each { task ->
            task.generateDescriptorSet = true
            task.descriptorSetOptions.includeSourceInfo = false
            task.descriptorSetOptions.includeImports = true
            task.descriptorSetOptions.path = "$projectDir/src/test/resources/__files/descriptors.bin"
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'io.odpf.sink.Main'
        duplicatesStrategy = 'exclude'
    }
    from {

        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
jacocoTestCoverageVerification {
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/config/**',
                              '**/**Factory**',
                              '**/exception/**',
                              '**/serializer/**',
                              '**/cortexpb/**',
                              '**/Clock**',
                              '**/GoGoProtos**',])
        })
    }
    violationRules {
        rule {
            limit {
                minimum = 0.75
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification
